Python:
class Solution:
    def flipAndInvertImage(self, image: List[List[int]]) -> List[List[int]]:
        result = []
        for item in image:
            lis = []
            for i in item[::-1]:
                if(i==0):
                    i = 1
                else:
                    i = 0
                lis.append(i)
            result.append(lis)
        return result
        
Runtime: 52 ms, faster than 60.64% of Python3 online submissions for Flipping an Image.
Memory Usage: 14.3 MB, less than 59.19% of Python3 online submissions for Flipping an Image.


Java:
class Solution {
    public int[][] flipAndInvertImage(int[][] image) {
        int[][] result = new int[image.length][image.length];
        
        int i,j,x,temp;
        int k =0;
        for(int[] imag: image){
        x = imag.length/2;
        i = 0;
        j = imag.length-1;
        while(i!=x){
            temp = imag[j];
            imag[j] = imag[i];
            imag[i] = temp;
            i++;
            j--;
        }
        imag = negation(imag);
        result[k] = imag;
        k++;
        }
          
        return result;  
    }
    
    static int[] negation(int[] x){
        for(int i = 0; i<x.length;i++){
            if(x[i] == 0){
                x[i] = 1;
            }
            else {
                x[i] = 0;
            }
        }
        return x;
    }
}
Runtime: 0 ms, faster than 100.00% of Java online submissions for Flipping an Image.
Memory Usage: 39.2 MB, less than 71.81% of Java online submissions for Flipping an Image.
