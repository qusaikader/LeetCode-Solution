# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def levelOrderBottom(self, root: TreeNode) -> List[List[int]]:
            if root == None: return root
            if root.left == None and root.right==None:
                ans = [[root.val]]
                return ans
                
            que = []
            ans = []
            subans = []
            que.append(root)
            que.append("F")
            while len(que)!=0:
                next = que.pop(0)
                if next == "F":
                    if len(que)!=0:
                        ans.append(subans)
                        subans = []
                        que.append("F")
                        continue 
                    else:
                        ans.append(subans)
                        break
                subans.append(next.val)
                if next.left:
                    que.append(next.left)
                if next.right:
                    que.append(next.right)
                
            return ans[::-1]

<<<<<<<<<<<<<I JUST REVERSED NORMAL LEVEL ORDER TRAVERSAL>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

Runtime: 36 ms, faster than 60.31% of Python3 online submissions for Binary Tree Level Order Traversal II.
Memory Usage: 14.5 MB, less than 66.83% of Python3 online submissions for Binary Tree Level Order Traversal II.
