Python:
class Solution:
    def searchRange(self, nums: List[int], target: int) -> List[int]:
        def leftBinarySearch(arr, x):
            low = 0
            high = len(arr) - 1
            mid = 0
            pos = -1

            while low <= high:

                mid = (high + low) // 2

                if arr[mid] < x:
                    low = mid+1

                elif arr[mid] > x:
                    high = mid - 1

                else:
                    pos = mid
                    high =  mid-1
            return pos
        
        
        def rightBinarySearch(arr, x):
            low = 0
            high = len(arr) - 1
            mid = 0
            pos = -1

            while low <= high:

                mid = (high + low) // 2

                if arr[mid] < x:
                    low = mid+1

                elif arr[mid] > x:
                    high = mid - 1

                else:
                    pos = mid
                    low =  mid+1

            return pos
  
        if(len(nums) == 1 and nums[0] == target):
            return [0,0]
        if(len(nums) == 0):
            return [-1,-1]
        
        
        result = [-1,-1]
        result[0] = leftBinarySearch(nums, target)
        result[1] = rightBinarySearch(nums, target)
        return result
Runtime: 84 ms, faster than 73.43% of Python3 online submissions for Find First and Last Position of Element in Sorted Array.
Memory Usage: 15.5 MB, less than 53.71% of Python3 online submissions for Find First and Last Position of Element in Sorted Array.

        
