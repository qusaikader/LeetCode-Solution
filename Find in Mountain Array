Java:
/**
 * // This is MountainArray's API interface.
 * // You should not implement it, or speculate about its implementation
 * interface MountainArray {
 *     public int get(int index) {}
 *     public int length() {}
 * }
 */
 
class Solution {
    public int findInMountainArray(int target, MountainArray mountainArr) {
        
        int index = indexMaximum(mountainArr);
        int i = binarySearchTwo(mountainArr,target,index+1,mountainArr.length()-1);
        int j = binarySearch(mountainArr,target, 0,index);
        System.out.println(j);
        if((i == -1) && (j !=-1)){
            return j;
        }
        else if((j == -1) && (i !=-1)){
            return i;
        }
        else if((i!=-1) && (j!=-1)){
            return Math.min(i,j);
        }
        else{
            return -1;
        }
        

    }
    
    
    
    public int indexMaximum(MountainArray nums){
        int start = 0;
        int end = nums.length() - 1;
        int index = -1;

        while(start<=end){
            int mid = (start+end)/2;


            if(nums.get(mid) > nums.get(mid+1)){
                end = mid - 1;
                index = mid;
            }
            else if(nums.get(mid) < nums.get(mid+1)){
                start = mid + 1;
            }
        }
        return index;
    }
    
    public int binarySearch(MountainArray nums, int target,int start,int end){
        int mid = (start+end)/2;
        if (start > end){
            return -1;
        }

        else if(nums.get(mid) > target){
            end  = mid - 1;
            return binarySearch(nums, target, start, end);

        }
        else if (nums.get(mid) < target){
            start = mid + 1;
            return binarySearch(nums, target, start, end);
        }
        else{
            return mid;
        }
    }

    public int binarySearchTwo(MountainArray nums, int target,int start,int end){
        int mid = (start+end)/2;
        if (start > end){
            return -1;
        }

        else if(nums.get(mid) > target){
            start = mid + 1;
            return binarySearchTwo(nums, target, start, end);

        }
        else if (nums.get(mid) < target){
            end  = mid - 1;
            return binarySearchTwo(nums, target, start, end);
        }
        else{
            return mid;
        }
    }


}
