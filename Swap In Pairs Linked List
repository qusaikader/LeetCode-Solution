# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def swapPairs(self, head: ListNode) -> ListNode:
        if head == None:
            return head
        if head.next == None:
            return head
        
        tempnode = head
        list1 = []
        list2 = []
        while tempnode != None:
            if tempnode.next == None:
                list1.append(tempnode.val)
                break
            else:
                list1.append(tempnode.val)
                tempnode = tempnode.next.next
        
        tempnode = head.next
        while tempnode != None:
            if tempnode.next == None:
                list2.append(tempnode.val)
                break
            else:
                list2.append(tempnode.val)
                tempnode = tempnode.next.next
        
        new_list = ListNode(list2.pop(0))
        temp = new_list
        while True:
            if len(list1)!=0:
                temp.next = ListNode(list1.pop(0))
                temp = temp.next
            if len(list2)!=0:
                temp.next = ListNode(list2.pop(0))
                temp = temp.next
            if len(list1) == 0 and len(list2) == 0:
                break
        return new_list
        
Runtime: 28 ms, faster than 84.51% of Python3 online submissions for Swap Nodes in Pairs.
Memory Usage: 14.1 MB, less than 90.79% of Python3 online submissions for Swap Nodes in Pairs.
