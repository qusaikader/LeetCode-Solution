Python:
        
######## RECURSIVE METHOD #######       
        def BinarySearch(nums,target,start,end):
            mid = int((start+end)/2)
            if start > end:
                return -1

            elif nums[mid] == target:
                return mid

            elif nums[mid] > target:
                end = mid - 1 
                return BinarySearch(nums,target,start,end)

            else:
                start = mid + 1
                return BinarySearch(nums,target,start,end)
            
        return BinarySearch(nums,target,0,len(nums)-1)


######## ITERATIVE METHOD ########
        start = 0
        end  = len(nums) - 1
        while(start<=end):
            mid = int((start+end)/2)
            
            if nums[mid]>target:
                end = mid - 1
            
            elif nums[mid]<target:
                start = mid + 1
            
            else:
                return mid
        return -1
            
JAVA:
class Solution {
    public int search(int[] nums, int target) {
        
        return binarySearch(nums,target,0,nums.length-1);
    }
    
    public int binarySearch(int[] nums, int target,int start,int end){
        int mid = (start+end)/2;
        if (start > end){
            return -1;
        }

        else if(nums[mid] > target){
            end  = mid - 1;
            return binarySearch(nums, target, start, end);

        }
        else if (nums[mid] < target){
            start = mid + 1;
            return binarySearch(nums, target, start, end);
        }
        else{
            return mid;
        }
    }
}

### RESULT ###
Runtime: 0 ms, faster than 100.00% of Java online submissions for Binary Search.
Memory Usage: 51.7 MB, less than 12.83% of Java online submissions for Binary Search.
        
