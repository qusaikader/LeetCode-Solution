# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def sortList(self, head: ListNode) -> ListNode:
        if head == None: return head
        if head.next == None: return head
        
        new_list = []
        tempnode = head
        while tempnode!=None:
            new_list.append(tempnode.val)
            tempnode = tempnode.next
        
        new_list = sorted(new_list)
        final_list = ListNode(new_list.pop(0))
        tempnode = final_list
        for i in range(1,len(new_list)+1):
            tempnode.next = ListNode(new_list.pop(0))
            tempnode = tempnode.next
        return final_list
        
        
        
Runtime: 456 ms, faster than 70.00% of Python3 online submissions for Sort List.
Memory Usage: 38.3 MB, less than 10.10% of Python3 online submissions for Sort List.
