Python:
class Solution:
    def diagonalSum(self, mat: List[List[int]]) -> int:
        result = 0
        for i in range(len(mat)):
            result+=mat[i][i]
        
        k = 0
        for i in range(len(mat)-1,-1,-1):
            if(i == k):
                k+=1
                continue
            else:
                result+=mat[k][i]
                k+=1
        
        return result
           
Runtime: 108 ms, faster than 67.14% of Python3 online submissions for Matrix Diagonal Sum.
Memory Usage: 14.2 MB, less than 100.00% of Python3 online submissions for Matrix Diagonal Sum.      


Java:
class Solution {
    public int diagonalSum(int[][] mat) { 
        
        int result = 0;
        int k =0;
        for(int i=0;i<mat.length;i++){
            result+=mat[i][i];
        }
        for(int i = mat.length-1;i>=0;i--){
            if(i!=k){
                result+=mat[k][i];
                k++;
            }
            else{
                k++;
            }
        }
         
        return result;
    }
}
Runtime: 0 ms, faster than 100.00% of Java online submissions for Matrix Diagonal Sum.
Memory Usage: 39 MB, less than 65.52% of Java online submissions for Matrix Diagonal Sum.
