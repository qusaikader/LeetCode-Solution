# Javascript:
var searchInsert = function(nums, target) {    
    let low = 0;
    let high = nums.length - 1;
    let mid;
    while(low<=high){
        mid = Math.floor((low+high)/2);
        if(nums[mid] === target){
            return mid;
        }
        else if(nums[mid] > target){
            high = mid - 1;
        }
        else if(nums[mid] < target){
            low = mid + 1;
        }
    }
    
    if(nums[mid] > target){
        return mid;
    }
    else{
        return mid+1;
    }

};

//Runtime: 64 ms, faster than 92.68% of JavaScript online submissions for Search Insert Position.
//Memory Usage: 41.8 MB, less than 88.11% of JavaScript online submissions for Search Insert Position.

# Python
class Solution:
    def searchInsert(self, nums: List[int], target: int) -> int:
        start = 0
        end  = len(nums) - 1
        while(start<=end):
            mid = int((start+end)/2)

            if nums[mid]>target:
                end = mid - 1

            elif nums[mid]<target:
                start = mid + 1

            else:
                return mid
                
        if(nums[mid] > target):
            return mid
        else:
            return mid+1
            
Runtime: 55 ms, faster than 89.58% of Python3 online submissions for Search Insert Position.
Memory Usage: 14.6 MB, less than 82.57% of Python3 online submissions for Search Insert Position.        

        
        
