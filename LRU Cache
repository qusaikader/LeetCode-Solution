class LRUCache:

    def __init__(self, capacity: int):
        self.capacity = capacity
        self.cache = dict()
    
    def get(self, key: int) -> int:
        if key in self.cache.keys():
            val = self.cache[key]
            del self.cache[key]
            self.cache[key] = val
            return val
        else:
            return -1
        

    def put(self, key: int, value: int) -> None:
        if key in self.cache.keys():
            del self.cache[key]
        if len(self.cache) == self.capacity:
            k = next(iter(self.cache.keys()))
            del self.cache[k]
        self.cache[key] = value 
          
Result:
Runtime: 1008 ms, faster than 67.17% of Python3 online submissions for LRU Cache.
Memory Usage: 74.4 MB, less than 96.41% of Python3 online submissions for LRU Cache.
          
          
