# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def middleNode(self, head: ListNode) -> ListNode:
        tempnode = head
        length = 0
        while tempnode != None:
            tempnode = tempnode.next
            length+=1
        if length%2 !=0:
            index = length//2
            i = 0 
            tempnode = head
            while i!=index:
                tempnode = tempnode.next
                i+=1
            head = tempnode
            return head
        elif length%2 == 0:
            index = length//2
            i = 0 
            tempnode = head
            while i!=index:
                tempnode = tempnode.next
                i+=1
            head = tempnode
            return head
 
#Result
Runtime: 24 ms, faster than 93.99% of Python3 online submissions for Middle of the Linked List.
Memory Usage: 14.2 MB, less than 40.51% of Python3 online submissions for Middle of the Linked List.
