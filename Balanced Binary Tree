# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isBalanced(self, root: TreeNode) -> bool:
            def level(root):
                que = []
                level=0
                que.append(root)
                que.append("F")
                while len(que)!=0:
                    next = que.pop(0)
                    if next == "F":
                        if len(que)!=0:
                            level+=1
                            que.append("F")
                            continue 
                        else:
                            level+=1
                            break
                    if next.left:
                        que.append(next.left)
                    if next.right:
                        que.append(next.right)

                return level
             
        
            if root == None: return True
            if root.left == None and root.right == None: return True
            
            que = []
            que.append(root)
            while len(que)!=0:
                x,y = 0,0
                nex = que.pop(0)
                if nex.left:
                    lefttree = nex.left
                    que.append(nex.left)
                    x = level(lefttree)
                if nex.right:
                    righttree = nex.right
                    que.append(nex.right)
                    y = level(righttree)
                
                if x-y > 1 or x-y < -1:
                    return False          
                
            return True

Runtime: 64 ms, faster than 33.72% of Python3 online submissions for Balanced Binary Tree.
Memory Usage: 14.8 MB, less than 99.88% of Python3 online submissions for Balanced Binary Tree.
