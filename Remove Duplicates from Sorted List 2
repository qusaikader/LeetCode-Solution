# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def deleteDuplicates(self, head: ListNode) -> ListNode:
        if head == None:
            return head
        
        new_list = []
        repeated_list = []
        tempnode = head
        while tempnode.next!= None:
            if tempnode.val == tempnode.next.val:
                repeated_list.append(tempnode.val)
                tempnode = tempnode.next
            else:
                if tempnode.val in repeated_list:
                    tempnode = tempnode.next
                    continue
                else:
                    new_list.append(tempnode.val)
                    tempnode = tempnode.next
                    
        if tempnode.val not in repeated_list:
            new_list.append(tempnode.val)
            
        if len(new_list) == 0:
            head = None
            return head
        
        new_head = ListNode(new_list[0])
        tempnode = new_head
        for i in range(1,len(new_list)):
            tempnode.next = ListNode(new_list[i])
            tempnode = tempnode.next
        return new_head

Runtime: 44 ms, faster than 45.95% of Python3 online submissions for Remove Duplicates from Sorted List II.
Memory Usage: 14.1 MB, less than 94.73% of Python3 online submissions for Remove Duplicates from Sorted List II.
