USING MERGESORT:
class Solution:
    def merge(arr,p,m,q):
        n1 = m-p+1
        n2 = q-m
        
        left = [0]*(n1+1)
        right = [0]*(n2+1)
        
        for i in range(n1):
            left[i] = arr[p+i]
        for i in range(n2):
            right[i] = arr[m+i+1]
        
    
        left[n1] = (10**4)+1
        right[n2]=(10**4)+1
        
        i=0
        j=0
        
        for k in range(p,q+1):
            if left[i] <= right[j]:
                arr[k] = left[i]
                i=i+1
            else:
                arr[k] = right[j]
                j=j+1
                
    
    def mergesort(arr,p,q):
            if p<q:
                mid = int((p+q)/2)
                Solution.mergesort(arr,p,mid)
                Solution.mergesort(arr,mid+1,q)
                Solution.merge(arr,p,mid,q)


    
                
    def findKthLargest(self, nums: List[int], k: int) -> int:
        Solution.mergesort(nums,0,len(nums)-1)

        j = len(nums) - k
        return nums[j]
        
        
USING INBUILT PYTOHN FUNCTION:
                 
    def findKthLargest(self, nums: List[int], k: int) -> int:
        nums = sorted(nums)
        j = len(nums) - k
        return nums[j]
            
RESULT:
Runtime: 63 ms, faster than 94.53% of Python3 online submissions for Kth Largest Element in an Array.
Memory Usage: 14.8 MB, less than 58.15% of Python3 online submissions for Kth Largest Element in an Array.
