class Solution:
    def countPrimeSetBits(self, left: int, right: int) -> int:
        final_count = 0
        for i in range(left,right+1):
#             cnt = 0

#             while i:
#                 val = i & 1 
#                 if val == 1:
#                     cnt+=1
#                 i = i>>1
            cnt = bin(i).replace("0b","").count("1")


            if cnt > 1:
                for j in range(2, int(cnt/2)+1):
                    if (cnt % j) == 0:
                        break
                else:
                    final_count+=1
        return final_count
                
Runtime: 396 ms, faster than 62.83% of Python3 online submissions for Prime Number of Set Bits in Binary Representation.
Memory Usage: 14.1 MB, less than 83.48% of Python3 online submissions for Prime Number of Set Bits in Binary Representation.
