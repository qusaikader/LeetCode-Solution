class Solution:
    def threeSumClosest(self, nums: List[int], target: int) -> int:
        nums = sorted(nums)
        ans = 0
        fdiff = 999999
        for i in range(len(nums)-2):
            j = i+1
            k = len(nums) - 1
            while(j<k):
                fsum = nums[i] + nums[j] + nums[k]
                diff = abs(target-fsum)

                if diff<fdiff:
                    ans = fsum
                    fdiff = diff
    

                if fsum<target:
                    j+=1
                elif fsum>target:
                    k-=1
                else:
                    return fsum

        return ans
Runtime: 116 ms, faster than 85.32% of Python3 online submissions for 3Sum Closest.
Memory Usage: 14.3 MB, less than 71.78% of Python3 online submissions for 3Sum Closest.

        int j = 1 , k =2,ans = 0;
        
        
        Arrays.sort(nums);
        
        
        int fsum = 0,diff = 0,fdiff = 999999;
        for(int i =0 ; i < nums.length -2;i++){
            j =  i + 1 ;
            k = nums.length - 1;
        while(j<k){
            fsum = nums[i] + nums[j] + nums[k];
            diff = Math.abs(target-fsum);
            
            if(fdiff>diff){
                ans = fsum;
                fdiff = diff;
            }
            
            
            if(fsum > target){
                k--;
            }
            else if(fsum < target){
                j++;
            }
            else{
                return ans;
                }
        }      
        }
        return ans;
    }
}
